% Cave/Bag/Corral puzzle solver by ASPuzzle
% Generated by pyclingo on 2025-06-07 22:44:48

% ===== Grid =====

% Define cells in the grid
cell(R, C) :- R = 1..9, C = 1..9.

% Define outside border cells
outside_grid(cell(R, C)) :- R = (0; 10), C = 0..10.
outside_grid(cell(R, C)) :- C = (0; 10), R = 1..9.
cell(R, C) :- outside_grid(cell(R, C)).

% Define directions in the grid
direction("n", cell(-1, 0)).
direction("ne", cell(-1, 1)).
direction("e", cell(0, 1)).
direction("se", cell(1, 1)).
direction("s", cell(1, 0)).
direction("sw", cell(1, -1)).
direction("w", cell(0, -1)).
direction("nw", cell(-1, -1)).

% Orthogonal directions
orthogonal_directions("n"; "e"; "s"; "w").

% Orthogonal adjacency definition
orthogonal(cell(R, C), cell(R + R_vec, C + C_vec)) :- cell(R, C), orthogonal_directions(D), direction(D, cell(R_vec, C_vec)), cell(R + R_vec, C + C_vec).

% Define ordered positions along major lines in the grid
ordered_line("e", R, C, cell(R, C)) :- cell(R, C), R = 1..9, C = 1..9.
ordered_line("s", C, R, cell(R, C)) :- cell(R, C), R = 1..9, C = 1..9.

% ===== Clues =====

% Define numbered cells
number(cell(1, 2), 3).
number(cell(1, 5), 4).
number(cell(1, 8), 2).
number(cell(2, 1), 8).
number(cell(3, 1), 5).
number(cell(3, 4), 4).
number(cell(3, 5), 4).
number(cell(4, 9), 2).
number(cell(5, 5), 4).
number(cell(6, 2), 4).
number(cell(6, 4), 4).
number(cell(6, 6), 4).
number(cell(6, 8), 4).
number(cell(7, 9), 4).
number(cell(8, 5), 4).
number(cell(8, 9), 3).
number(cell(9, 5), 4).
number(cell(9, 8), 3).

% ===== Symbols =====

% Find anchor cell for cave
cave_anchor(Cmin) :- Cmin = #min{Cell : cave(Cell)}.

% Contiguity for cave
connected_cave(cell(R, C)) :- cave_anchor(cell(R, C)).
connected_cave(C_adj) :- connected_cave(C), cave(C_adj), orthogonal(C, C_adj).
:- cave(C), not connected_cave(C).

% Contiguity for wall
connected_wall(C) :- outside_grid(C).
connected_wall(C_adj) :- connected_wall(C), wall(C_adj), orthogonal(C, C_adj).
:- wall(C), not connected_wall(C).

% Forbid disconnecting checkerboard pattern for cave
:- cave(cell(R, C)), cave(cell(R + 1, C + 1)), not cave(cell(R, C + 1)), not cave(cell(R + 1, C)), cell(R, C), cell(R + 1, C + 1).
:- cave(cell(R, C + 1)), cave(cell(R + 1, C)), not cave(cell(R, C)), not cave(cell(R + 1, C + 1)), cell(R, C), cell(R + 1, C + 1).

% Place symbols in the grid
{ cave(cell(R, C)); wall(cell(R, C)) } = 1 :- cell(R, C), not outside_grid(cell(R, C)).

% ===== Rules =====

% Outside border cells must be walls
wall(C) :- outside_grid(C).

% Numbered cells must be caves
cave(C) :- number(C, _).

% Line-of-sight counting
can_see(cell(R, C), Dir, Idx, Pos) :- number(cell(R, C), _), ordered_line(Dir, Idx, Pos, cell(R, C)).
can_see(cell(R, C), Dir, Idx, Pos + Delta) :- can_see(cell(R, C), Dir, Idx, Pos), ordered_line(Dir, Idx, Pos + Delta, cell(R_seen, C_seen)), Delta = (-1; 1), cave(cell(R_seen, C_seen)).
Count = N :- number(cell(R, C), N), Count = #count{cell(R_seen, C_seen) : can_see(cell(R, C), Dir, Idx, Pos), ordered_line(Dir, Idx, Pos, cell(R_seen, C_seen))}.

#show.
#show cave/1.
#show wall(cell(R, C)) : wall(cell(R, C)), not outside_grid(cell(R, C)).
