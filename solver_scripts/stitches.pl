% Stitches puzzle solver by ASPuzzle
% Generated by pyclingo on 2025-05-27 09:43:47
#const stitch_count = 1.

% ===== Grid =====

% Define cells in the grid
cell(R, C) :- R = 1..5, C = 1..5.

% Define directions in the grid
direction("n", cell(-1, 0)).
direction("ne", cell(-1, 1)).
direction("e", cell(0, 1)).
direction("se", cell(1, 1)).
direction("s", cell(1, 0)).
direction("sw", cell(1, -1)).
direction("w", cell(0, -1)).
direction("nw", cell(-1, -1)).

% Orthogonal directions
orthogonal_directions("n"; "e"; "s"; "w").

% Orthogonal adjacency definition
orthogonal(cell(R, C), cell(R + R_vec, C + C_vec)) :- cell(R, C), orthogonal_directions(D), direction(D, cell(R_vec, C_vec)), cell(R + R_vec, C + C_vec).

% Define major lines in the grid
line("e", R, cell(R, C)) :- cell(R, C), R = 1..5.
line("s", C, cell(R, C)) :- cell(R, C), C = 1..5.

% ===== Regions =====

% Define regions
region(cell(1, 1), 1).
region(cell(1, 2), 3).
region(cell(1, 3), 3).
region(cell(1, 4), 4).
region(cell(1, 5), 4).
region(cell(2, 1), 1).
region(cell(2, 2), 2).
region(cell(2, 3), 3).
region(cell(2, 4), 3).
region(cell(2, 5), 4).
region(cell(3, 1), 1).
region(cell(3, 2), 2).
region(cell(3, 3), 2).
region(cell(3, 4), 3).
region(cell(3, 5), 4).
region(cell(4, 1), 5).
region(cell(4, 2), 5).
region(cell(4, 3), 5).
region(cell(4, 4), 5).
region(cell(4, 5), 4).
region(cell(5, 1), 5).
region(cell(5, 2), 5).
region(cell(5, 3), 5).
region(cell(5, 4), 5).
region(cell(5, 5), 4).

% ===== Clues =====

% Stitch counts
expected_count("e", 1, 4).
expected_count("e", 2, 3).
expected_count("e", 3, 4).
expected_count("e", 4, 3).
expected_count("e", 5, 2).
expected_count("s", 1, 4).
expected_count("s", 2, 4).
expected_count("s", 3, 3).
expected_count("s", 4, 4).
expected_count("s", 5, 1).

% ===== Rules =====

% Find adjoining regions
adjoining_region(Id1, Id2) :- region(A, Id1), region(B, Id2), orthogonal(A, B), Id1 < Id2.

% Create stitches between adjoining regions
{ stitch(A, B) : region(A, Id1), region(B, Id2), orthogonal(A, B) } = stitch_count :- adjoining_region(Id1, Id2).

% Define cells in stitches
cell_in_stitch(A) :- stitch(A, _).
cell_in_stitch(A) :- stitch(_, A).

% Cells can participate in at most one stitch
N = 1 :- cell_in_stitch(A), N = #count{cell(R, C) : stitch(A, cell(R, C)); cell(R, C) : stitch(cell(R, C), A)}.

% Count stitches in each major line
Count = Counter :- expected_count(Dir, N, Counter), Count = #count{cell(R, C) : cell_in_stitch(cell(R, C)), line(Dir, N, cell(R, C))}.

#show.
#show stitch/2.
