% Minesweeper puzzle solver by ASPuzzle
% Generated by pyclingo on 2025-05-27 09:43:08

% ===== Grid =====

% Define cells in the grid
cell(R, C) :- R = 1..5, C = 1..5.

% Define directions in the grid
direction("n", cell(-1, 0)).
direction("ne", cell(-1, 1)).
direction("e", cell(0, 1)).
direction("se", cell(1, 1)).
direction("s", cell(1, 0)).
direction("sw", cell(1, -1)).
direction("w", cell(0, -1)).
direction("nw", cell(-1, -1)).

% Vertex-sharing adjacency definition
vertex_sharing(cell(R, C), cell(R + R_vec, C + C_vec)) :- cell(R, C), direction(_, cell(R_vec, C_vec)), cell(R + R_vec, C + C_vec).

% ===== Clues =====

number(cell(1, 2), 2).
number(cell(2, 3), 3).
number(cell(2, 4), 2).
number(cell(3, 1), 3).
number(cell(3, 4), 2).
number(cell(4, 2), 2).
number(cell(4, 5), 1).
number(cell(5, 3), 1).
number(cell(5, 4), 2).

% ===== Symbols =====

% Place symbols in the grid
0 { mine(cell(R, C)) } 1 :- cell(R, C), not number(cell(R, C), _).

% ===== Rules =====

% Numbers indicate the number of adjacent mines
Count = N :- number(cell(R, C), N), Count = #count{cell(R_adj, C_adj) : vertex_sharing(cell(R, C), cell(R_adj, C_adj)), mine(cell(R_adj, C_adj))}.

% Mine count constraint
N = 7 :- N = #count{cell(R, C) : mine(cell(R, C))}.

#show.
#show mine/1.
