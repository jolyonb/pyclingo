% Tents puzzle solver by ASPuzzle
% Generated by pyclingo on 2025-05-27 09:43:56

% ===== Grid =====

% Define cells in the grid
cell(R, C) :- R = 1..6, C = 1..6.

% Orthogonal directions
orthogonal_directions("n"; "e"; "s"; "w").

% Define directions in the grid
direction("n", cell(-1, 0)).
direction("ne", cell(-1, 1)).
direction("e", cell(0, 1)).
direction("se", cell(1, 1)).
direction("s", cell(1, 0)).
direction("sw", cell(1, -1)).
direction("w", cell(0, -1)).
direction("nw", cell(-1, -1)).

% Define major lines in the grid
line("e", R, cell(R, C)) :- cell(R, C), R = 1..6.
line("s", C, cell(R, C)) :- cell(R, C), C = 1..6.

% Vertex-sharing adjacency definition
vertex_sharing(cell(R, C), cell(R + R_vec, C + C_vec)) :- cell(R, C), direction(_, cell(R_vec, C_vec)), cell(R + R_vec, C + C_vec).

% ===== Clues =====

% Trees
tree(cell(1, 6)).
tree(cell(2, 4)).
tree(cell(3, 1)).
tree(cell(4, 4)).
tree(cell(4, 5)).
tree(cell(6, 3)).
tree(cell(6, 5)).

% Tent counts
expected_count("e", 1, 1).
expected_count("e", 2, 1).
expected_count("e", 3, 0).
expected_count("e", 4, 2).
expected_count("e", 5, 1).
expected_count("e", 6, 2).
expected_count("s", 1, 1).
expected_count("s", 2, 1).
expected_count("s", 3, 1).
expected_count("s", 4, 1).
expected_count("s", 5, 1).
expected_count("s", 6, 2).

% ===== Rules =====

% Tree ties
{ tie(C, D) : orthogonal_directions(D) } = 1 :- tree(C).
tie_destination(cell(R, C), cell(R + R_vec, C + C_vec)) :- tie(cell(R, C), D), direction(D, cell(R_vec, C_vec)).

% Tent placement
tent(C) :- tie_destination(_, C).
:- tent(cell(R, C)), not cell(R, C).
:- tent(C), tree(C).
A = B :- tie_destination(A, C), tie_destination(B, C).

% Line tent count constraints
Count = Clue :- expected_count(D, N, Clue), Count = #count{cell(R, C) : tent(cell(R, C)), line(D, N, cell(R, C))}.

% Tent adjacency constraints
:- tent(A), tent(B), vertex_sharing(A, B).

#show.
#show tent/1.
