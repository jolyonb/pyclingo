% Spiral Galaxies solver by ASPuzzle
% Generated by pyclingo on 2025-05-27 09:42:52

% ===== Grid =====

% Define cells in the grid
cell(R, C) :- R = 1..15, C = 1..15.

% Define directions in the grid
direction("n", cell(-1, 0)).
direction("ne", cell(-1, 1)).
direction("e", cell(0, 1)).
direction("se", cell(1, 1)).
direction("s", cell(1, 0)).
direction("sw", cell(1, -1)).
direction("w", cell(0, -1)).
direction("nw", cell(-1, -1)).

% Orthogonal directions
orthogonal_directions("n"; "e"; "s"; "w").

% Orthogonal adjacency definition
orthogonal(cell(R, C), cell(R + R_vec, C + C_vec)) :- cell(R, C), orthogonal_directions(D), direction(D, cell(R_vec, C_vec)), cell(R + R_vec, C + C_vec).

% ===== Clues =====
center(cell(1, 7), cell(2, 8), 1).
center(cell(1, 11), cell(1, 11), 2).
center(cell(2, 1), cell(2, 1), 3).
center(cell(2, 2), cell(2, 2), 4).
center(cell(2, 3), cell(3, 3), 5).
center(cell(2, 6), cell(2, 6), 6).
center(cell(2, 11), cell(3, 11), 7).
center(cell(2, 13), cell(2, 13), 8).
center(cell(3, 5), cell(3, 5), 9).
center(cell(3, 8), cell(3, 9), 10).
center(cell(4, 2), cell(4, 2), 11).
center(cell(4, 7), cell(4, 8), 12).
center(cell(4, 13), cell(4, 14), 13).
center(cell(4, 15), cell(5, 15), 14).
center(cell(5, 3), cell(6, 4), 15).
center(cell(5, 8), cell(5, 8), 16).
center(cell(5, 10), cell(6, 11), 17).
center(cell(6, 2), cell(6, 2), 18).
center(cell(6, 6), cell(6, 6), 19).
center(cell(6, 7), cell(7, 8), 20).
center(cell(6, 9), cell(6, 9), 21).
center(cell(6, 13), cell(6, 13), 22).
center(cell(7, 1), cell(7, 1), 23).
center(cell(7, 3), cell(8, 3), 24).
center(cell(7, 14), cell(7, 15), 25).
center(cell(8, 5), cell(9, 6), 26).
center(cell(8, 9), cell(9, 9), 27).
center(cell(8, 11), cell(9, 12), 28).
center(cell(9, 7), cell(10, 8), 29).
center(cell(10, 3), cell(10, 3), 30).
center(cell(10, 9), cell(11, 10), 31).
center(cell(10, 11), cell(10, 12), 32).
center(cell(10, 14), cell(10, 14), 33).
center(cell(11, 3), cell(12, 3), 34).
center(cell(11, 6), cell(12, 7), 35).
center(cell(11, 15), cell(11, 15), 36).
center(cell(12, 9), cell(13, 10), 37).
center(cell(12, 14), cell(12, 15), 38).
center(cell(13, 1), cell(13, 1), 39).
center(cell(13, 2), cell(14, 2), 40).
center(cell(13, 4), cell(13, 5), 41).
center(cell(13, 13), cell(13, 14), 42).
center(cell(14, 3), cell(14, 3), 43).
center(cell(14, 5), cell(14, 5), 44).
center(cell(14, 9), cell(15, 9), 45).
center(cell(14, 10), cell(14, 11), 46).
center(cell(14, 12), cell(15, 13), 47).
center(cell(14, 15), cell(15, 15), 48).
center(cell(15, 4), cell(15, 4), 49).
center(cell(15, 7), cell(15, 7), 50).
center(cell(15, 11), cell(15, 11), 51).
center(cell(15, 14), cell(15, 14), 52).

% ===== Regions =====

% Cell Status Assignment
{ connected(cell(R, C)) } = 1 :- cell(R, C).
anchor(C) :- center(C, _, _).
connected(C) :- anchor(C).

% Connection Rules
{ connects_to(C, N) : orthogonal(C, N) } :- connected(C).
connects_to(N, C) :- connects_to(C, N).

% Region Propagation
region(C, C) :- anchor(C).
region(N, A) :- connects_to(N, C), region(C, A).
connects_to(C, N) :- orthogonal(C, N), region(C, A), region(N, A).

% Integrity Constraints
:- connected(C), not region(C, _).
A1 = A2 :- region(C, A1), region(C, A2).

% ===== Rules =====

% Symmetry rule
:- center(cell(R1, C1), cell(R2, C2), Id), region(cell(R, C), cell(R1, C1)), not region(cell(R1 + R2 - R, C1 + C2 - C), cell(R1, C1)).

% Solution extraction
galaxy(Loc, Id) :- region(Loc, A), center(A, _, Id).

#show.
#show galaxy/2.
