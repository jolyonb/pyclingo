% Skyscrapers puzzle solver by ASPuzzle
% Generated by pyclingo on 2025-06-09 09:48:31

% ===== Grid =====

% Define cells in the grid
cell(R, C) :- R = 1..4, C = 1..4.

% Define major lines in the grid
line("e", R, cell(R, C)) :- cell(R, C), R = 1..4.
line("s", C, cell(R, C)) :- cell(R, C), C = 1..4.

% Define ordered positions along orthogonal lines in the grid
line_of_sight("e", R, C, cell(R, C)) :- cell(R, C).
line_of_sight("w", R, 5 - C, cell(R, C)) :- cell(R, C).
line_of_sight("s", C, R, cell(R, C)) :- cell(R, C).
line_of_sight("n", C, 5 - R, cell(R, C)) :- cell(R, C).

% ===== Clues =====

% Clue constraints
clue("s", 1, 2).
clue("s", 2, 1).
clue("s", 3, 2).
clue("s", 4, 3).
clue("n", 1, 2).
clue("n", 2, 3).
clue("n", 3, 2).
clue("n", 4, 1).
clue("e", 1, 2).
clue("e", 2, 1).
clue("e", 3, 2).
clue("e", 4, 2).
clue("w", 1, 3).
clue("w", 2, 4).
clue("w", 3, 2).
clue("w", 4, 1).

% ===== Symbols =====

% Place symbols in the grid
{ height(cell(R, C), V) : V = 1..4 } = 1 :- cell(R, C).

% ===== Rules =====

% Each height appears exactly once in each row and column
C1 = C2 :- height(C1, N), height(C2, N), line(D, Idx, C1), line(D, Idx, C2).

% Line-of-sight visibility
blocked(Dir, Idx, Pos) :- line_of_sight(Dir, Idx, Pos, cell(R, C)), height(cell(R, C), H), line_of_sight(Dir, Idx, Pos_prev, cell(R_prev, C_prev)), Pos_prev < Pos, height(cell(R_prev, C_prev), H_prev), H_prev > H.
visible(Dir, Idx, Pos) :- line_of_sight(Dir, Idx, Pos, C), not blocked(Dir, Idx, Pos).

% Visible count must match clue
C = N :- clue(Dir, Idx, N), C = #count{Pos : visible(Dir, Idx, Pos)}.

#show.
#show height/2.
